---
alwaysApply: true
---
Here‚Äôs a concise set of ‚ÄúCursor‚Äù (editor/assistant) rules and overarching project rules to ensure your Next.js/TSX personal-bio site is always safe, lean, thematically consistent, and bug-free.

‚∏ª

üéØ Cursor Assistant Rules
	1.	Always TSX/TypeScript
	‚Ä¢	Generate only .tsx files with fully typed props and state.
	‚Ä¢	Enforce noImplicitAny, strictNullChecks, etc.
	2.	Minimal & Intent-Driven
	‚Ä¢	No dead code, unused imports or needless abstractions.
	‚Ä¢	Favor clear, focused functions/components over ‚Äúclever‚Äù one-liners.
	3.	Secure by Default
	‚Ä¢	Sanitize any dynamic input before rendering.
	‚Ä¢	Use Next.js built-in protection (e.g. next/image, automatic XSS prevention).
	‚Ä¢	Never disable security-focused ESLint rules or TypeScript checks.
	4.	Theme-First
	‚Ä¢	Always pull colors, spacing, fonts from your central theme (e.g. Tailwind config or Styled-Component ThemeProvider).
	‚Ä¢	No hard-coded CSS values‚Äîuse tokens.
	5.	Error-Resilient
	‚Ä¢	Wrap async calls in try/catch and show fallback UI.
	‚Ä¢	Every page/component uses an ErrorBoundary or getStaticProps/getServerSideProps error handler.
	6.	Lint & Format on Save
	‚Ä¢	Run ESLint (next/core-web-vitals + plugin:security/recommended) and Prettier.
	‚Ä¢	Fix auto-fixable issues before showing you code.
	7.	Folder Structure Awareness
	‚Ä¢	Know the standard Next.js app/ and pages/ layout.
	‚Ä¢	Always place components in src/components, hooks in src/hooks, lib code in src/lib.
	8.	Accessibility Always
	‚Ä¢	Enforce eslint-plugin-jsx-a11y rules.
	‚Ä¢	Generate alt, aria-*, focus management automatically when needed.
	9.	Performance-First
	‚Ä¢	Prefer next/image, next/font, and built-in code-splitting.
	‚Ä¢	No large in-lined assets or unoptimized third-party scripts.
	10.	Test-Driven Generation

	‚Ä¢	For every new component, generate a matching Jest/RTL test stub.
	‚Ä¢	Ensure 100% type safety and no linter errors before code is ‚Äúcomplete.‚Äù

	11.	Design-First UI
	‚Ä¢	Always produce a modern, visually appealing UI design that follows best practices for layout, typography, spacing, and color harmony.

	12.	Explicit Limitation Handling
	‚Ä¢	Do not implement local fallbacks; if a requested feature cannot be generated, explicitly state that you are unable to do it.

	13.	Developer Mindset
	‚Ä¢	Adopt a professional developer‚Äôs perspective: anticipate edge cases, optimize for performance, maintain clean architecture, and follow best practices.

	14.	Concise Code Generation
	‚Ä¢	Produce lean, focused code: avoid unnecessary verbosity, redundant comments, or over-engineering. Favor clarity and brevity.

‚∏ª

üèóÔ∏è Project Rules & Conventions

1. Folder & File Layout

/src
  /app                      ‚Üê Next.js App Router
    layout.tsx              ‚Üê site-wide shell (theme, fonts, meta)
    page.tsx                ‚Üê home page
    /about
      page.tsx
    /blog
      /[slug]
        page.tsx
  /components               ‚Üê reusable UI (buttons, cards, etc.)
  /hooks                    ‚Üê custom React hooks
  /lib                      ‚Üê data-fetching, API clients
  /styles                   ‚Üê global CSS / Tailwind overrides
  /types                    ‚Üê shared TypeScript interfaces
/next.config.js
/tsconfig.json
/.eslintrc.js
/prettier.config.js
/.husky
/lint-staged.config.js

2. TypeScript Configuration (tsconfig.json)

{
  "compilerOptions": {
    "target": "es2022",
    "module": "esnext",
    "jsx": "preserve",
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "forceConsistentCasingInFileNames": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "incremental": true,
    "baseUrl": "src"
  },
  "include": ["src"],
  "exclude": ["node_modules"]
}

3. ESLint & Security

// .eslintrc.js
module.exports = {
  root: true,
  extends: [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended",
    "plugin:security/recommended",
    "plugin:jsx-a11y/recommended"
  ],
  rules: {
    "@typescript-eslint/no-explicit-any": "error",
    "security/detect-object-injection": "warn",
    // your custom wins‚Ä¶
  },
};

4. Theming (Tailwind or Styled-Components)
	‚Ä¢	Tailwind: keep all design tokens (colors, fonts, spacing) in tailwind.config.js.
	‚Ä¢	Styled-Components: central ThemeProvider in app/layout.tsx with a single theme object.

5. Pre-Commit & CI
	‚Ä¢	Husky + lint-staged:

// lint-staged.config.js
{
  "*.{ts,tsx}": ["eslint --fix", "prettier --write"],
  "*.css": ["prettier --write"]
}


	‚Ä¢	GitHub Actions: run npm run lint && npm run build && npm test on every push.

6. Dependency & Vulnerability Management
	‚Ä¢	Enable Dependabot for automated PRs on npm-dependencies.
	‚Ä¢	Run npm audit in CI; fail on high/critical.

7. Testing
	‚Ä¢	Unit: Jest + React Testing Library for components/hooks.
	‚Ä¢	Integration: Cypress for critical flows (form submissions, navigation).
	‚Ä¢	Enforce coverage ‚â• 90%.

8. Documentation & Storybook
	‚Ä¢	Spin up Storybook for visual regression and component sandboxing.
	‚Ä¢	Document every component‚Äôs props in MDX stories.

‚∏ª

With these rules in place, your Cursor assistant will always generate lean, secure, theme-aligned, and error-free Next.js/TSX code‚Äîand your project will stay rock-solid and easy to maintain.